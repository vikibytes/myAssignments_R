ls
ll
v = 1
plot(3 , v)
install.packages("dplyr")
data("mtcars")
library("dplyr", lib.loc="~/R/win-library/3.3")
install.packages("Rcpp")
library("dplyr", lib.loc="~/R/win-library/3.3")
library("dplyr", lib.loc="~/R/win-library/3.3")
install.packages("Rcpp")
install.packages(Rcpp)
library("dplyr", lib.loc="~/R/win-library/3.3")
install.packages("Rcpp")
library("dplyr", lib.loc="~/R/win-library/3.3")
install.packages("Rcpp")
save.image()
library("dplyr", lib.loc="~/R/win-library/3.3")
install.packages(Rcpp)
install.packages("Rcpp")
install.packages("C:/Users/vikas/AppData/Local/Temp/RtmpYZaVWg/downloaded_packages/Rcpp_0.12.7.zip", repos = NULL, type = "win.binary")
install.packages("Rcpp")
library("dplyr", lib.loc="~/R/win-library/3.3")
search()
library()
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(i)
}
install.packages("swirl")
library("swirl")
swirl()
5 + 7
bye()
install.packages("rmarkdown")
?igraph
install.packages("igraph")
.libPaths()
install.packages("rmarkdown")
installed.packages()
install.packages("ggplot")
install.packages("ggplot2")
install.packages("XML", lib="C:/R/R-3.3.1/library")
install.packages("RCurl", lib="C:/R/R-3.3.1/library")
dvc_exbus_table <- readHTMLTable(dvc_exbus)
setwd("C://Users//vikas//Desktop//EPBA//Assignment_1")
save.image()
getwd()
library(XML)
library(RCurl)
myWebPage <- 'C://Users//vikas//Desktop//EPBA//Assignment_1//The World\'s Most Valuable Brands List - Forbes.html'
forbesRawData <- readHTMLTable(myWebPage)
forbesRawTable <- forbesRawData$the_list
str(forbesRawTable)
# class(forbesRawTable)
forbesRawTable <- forbesRawTable[,-1]
forbesRawTable$Rank <- gsub('#','',forbesRawTable$Rank)
write.csv(forbesRawTable, file = "ForbesMV100.csv")
head(forbesRawTable)
# factor(forbesRawTable$Industry)
forbesRawTable$`Brand Value` <- gsub("$","",forbesRawTable$`Brand Value`)
myTable <- forbesRawTable
myTable$`Brand Value`[1]
grep('$',myTable$`Brand Value`)
#mychar <- c("My_test", "My_Test_3", "_qwerty_pop_")
## Converting myTable$`Brand Value` into Numeric
myTable$`Brand Value` <- sub(pattern="[$]", replacement="", x=myTable$`Brand Value`)
myTable$`Brand Value` <- sub(pattern="[ B]", replacement="", x=myTable$`Brand Value`)
myTable$`Brand Value` <- sub(pattern="[B]", replacement="", x=myTable$`Brand Value`)
myTable$`Brand Value` <- as.numeric(myTable$`Brand Value`)
# Conerting myTable$`1-Yr Value Change' into numeric
myTable$`1-Yr Value Change` <- as.numeric(sub(pattern = "[%]",replacement = '', x = myTable$`1-Yr Value Change`))
length(grep('B',myTable$`Brand Revenue`))
length(grep('-',myTable$`Brand Revenue`))
myTable$`Brand Revenue` <- sub(pattern = "B", replacement = '', x = myTable$`Brand Revenue`)
myTable$`Brand Revenue` <- sub(pattern = "[$]", replacement = '', x = myTable$`Brand Revenue`)
myTable$`Brand Revenue` <- as.numeric(myTable$`Brand Revenue`)
# Converting Company Advertizing in Numeric
# Remove $ signs
# Find billion values
myTable$`Company Advertising` <- sub(pattern = "[$]", replacement = '', x = myTable$`Company Advertising`)
a = length(grep(pattern = "B",x = myTable$`Company Advertising`))
grep(pattern = "B",x = myTable$`Company Advertising`)
myTable$`Company Advertising` <- sub(pattern = "B", replacement = '', x = myTable$`Company Advertising`)
# Find million Values
b = length(grep(pattern = "M",x = myTable$`Company Advertising`))
grep(pattern = "M",x = myTable$`Company Advertising`)
# Find Blank values
c = length(grep(pattern = "-",x = myTable$`Company Advertising`))
grep(pattern = "-",x = myTable$`Company Advertising`)
a+b+c
#vCleaning up B Values
length(grep(pattern = "B",x = myTable$`Company Advertising`))
a = grep(pattern = "B",x = myTable$`Company Advertising`)
for (i in a) {
myTable$`Company Advertising`[i] <- sub(pattern = "B", replacement = '', x = myTable$`Company Advertising`[i])
}
myTable$`Company Advertising`
#Cleaning Up M Values
length(grep(pattern = "M",x = myTable$`Company Advertising`))
b = grep(pattern = "M",x = myTable$`Company Advertising`)
for (i in b) {
myTable$`Company Advertising`[i] <- sub(pattern = "M", replacement = '', x = myTable$`Company Advertising`[i])
}
myTable$`Company Advertising` <- as.numeric(myTable$`Company Advertising`)
# Converting Million Values into Billions
for (i in b) {
myTable$`Company Advertising`[i] <- myTable$`Company Advertising`[i] / 1000
}
myTable$`Company Advertising`
library(dplyr)
print(myLevels)
factor(myTable$Industry)
myTable$Industry <- as.character(myTable$Industry)
class(myTable$Industry)
techMVB <- filter(myTable, myTable$Industry == "Technology")
luxMVB <- filter(myTable, myTable$Industry == "Luxury")
AutoMVB <- filter(myTable, myTable$Industry == "Automotive")
finServMVB <- filter(myTable, myTable$Industry == "Financial Services")
ggplot(data=techMVB, aes(x = techMVB$`Brand Revenue`, y = techMVB$`Company Advertising`)) +
# geom_point(aes(color = techMVB$`Company Advertising`)) +
geom_smooth(method = "lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw() +
geom_point(aes(size = techMVB$`Company Advertising`))
# geom_text(aes(labels(techMVB$Brand)))
View(techMVB)
library(dplyr)
print(myLevels)
factor(myTable$Industry)
myTable$Industry <- as.character(myTable$Industry)
class(myTable$Industry)
techMVB <- filter(myTable, myTable$Industry == "Technology")
luxMVB <- filter(myTable, myTable$Industry == "Luxury")
AutoMVB <- filter(myTable, myTable$Industry == "Automotive")
finServMVB <- filter(myTable, myTable$Industry == "Financial Services")
View(luxMVB)
View(AutoMVB)
View(finServMVB)
View(forbesRawTable)
library(ggplot2)
# d <- ggplot(diamonds, aes(x=carat, y=price))
ggplot(data=techMVB, aes(x = techMVB$`Brand Revenue`, y = techMVB$`Company Advertising`))
+ geom_point(aes(color = techMVB$`Company Advertising`))
#                      + geom_smooth(method = 'lm')
#                    + coord_cartesian()
library(ggvis)
head(techMVB)
ggvis(techMVB, props(x = techMVB$`Company Advertising`, y = techMVB$`1-Yr Value Change`))
library(ggvis)
head(techMVB)
ggvis(techMVB, props(x = ~`Company Advertising`, y = ~`1-Yr Value Change`))
ggvis(techMVB, props(x = ~`Company Advertising`, y = ~`1-Yr Value Change`)) + mark_point()
library(ggvis)
head(techMVB)
ggvis(techMVB, props(x = techMVB$`Company Advertising`, y = te$`1-Yr Value Change`)) + mark_point()
library(ggvis)
head(techMVB)
ggvis(techMVB, props(x = techMVB$`Company Advertising`, y = techMVB$`1-Yr Value Change`)) + mark_point()
library(ggvis)
head(techMVB)
length(techMVB$`1-Yr Value Change`)
length(techMVB$`Company Advertising`)
ggvis(techMVB, props(x = techMVB$`Company Advertising`, y = techMVB$`1-Yr Value Change`)) + mark_point()
ggvis(mtcars, props(x = ~wt, y = ~mpg)) + mark_point()
library(ggvis)
head(techMVB)
length(techMVB$`1-Yr Value Change`)
length(techMVB$`Company Advertising`)
#ggvis(techMVB, props(x = techMVB$`Company Advertising`, y = techMVB$`1-Yr Value Change`)) + mark_point()
ggvis(mtcars, props(x = ~wt, y = ~mpg)) + mark_point()
library(ggvis)
data("iris")
data("discoveries")
View(finServMVB)
summary(iris)
library(ggvis)
data("iris")
wD <- data("discoveries")
summary(iris)
class(wD)
wD
View(AutoMVB)
first_plot <- ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width)
first_plot <- ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width)
layer_points(first_plot)
layer_points(ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width))
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width) %>%
layer_points()
require(dplyr)
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width) %>%
mutate(Sepal.Length = Sepal.Length*10) %>%
layer_points()
require(dplyr)
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width) %>%
mutate(Sepal.Length = Sepal.Length*10) %>%
layer_points()
require(dplyr)
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width) %>%
mutate(Sepal.Length = Sepal.Length*10) %>%
layer_points() %>%
add_axis("x",title = "Length of Sepal") %>%
add_axis("y",title = "Length of Petal")
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, fill = ~Petal.Length) %>%
layer_points()
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, shape = ~factor(round(Petal.Length,0)) %>%
layer_points()
require(dplyr)
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, shape = ~factor(round(Petal.Length,0)) %>%
layer_points()
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, shape = ~factor(round(Petal.Length,0))) %>%
layer_points()
library(ggvis)
data("iris")
wD <- data("discoveries")
summary(iris)
class(wD)
wD
first_plot <- ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width)
layer_points(first_plot)
layer_points(ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width))
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, shape = ~factor(round(Petal.Length,0))) %>%
layer_points()
library(ggvis)
data("iris")
wD <- data("discoveries")
summary(iris)
class(wD)
wD
first_plot <- ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width)
layer_points(first_plot)
layer_points(ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width))
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, size = ~Petal.Length) %>%
layer_points()
library(ggvis)
data("iris")
wD <- data("discoveries")
summary(iris)
class(wD)
wD
first_plot <- ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width)
layer_points(first_plot)
layer_points(ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width))
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, fill := “red” ,size := 300, opacity := 0.3 ) %>%
layer_points()
library(ggvis)
data("iris")
wD <- data("discoveries")
summary(iris)
class(wD)
wD
first_plot <- ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width)
layer_points(first_plot)
layer_points(ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width))
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, fill := “red” ,size := 300, opacity := 0.3 ) %>%
layer_points()
library(ggvis)
data("iris")
wD <- data("discoveries")
summary(iris)
class(wD)
wD
first_plot <- ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width)
layer_points(first_plot)
layer_points(ggvis(iris, x = ~Sepal.Length, y = ~Sepal.Width))
iris %>%
ggvis( x = ~Sepal.Length, y = ~Sepal.Width, fill := “red” ,size := 300, opacity := 0.3 ) %>%
layer_points()
library(ggvis)
data("iris")
iris %>%
ggvis(x = ~Sepal.Length, y = ~Petal.Length) %>%
layer_lines()
library(ggvis)
data("iris")
iris %>%
ggvis(x = ~Sepal.Length, y = ~Petal.Length) %>%
layer_lines() %>%
layer_smooths()
layer_points()
library(ggvis)
data("iris")
iris %>%
ggvis(x = ~Sepal.Length, y = ~Petal.Length) %>%
layer_lines() %>%
layer_smooths() %>%
layer_points()
library(ggvis)
data("iris")
iris %>%
ggvis(x = ~Sepal.Length, y = ~Petal.Length) %>%
layer_smooths() %>%
layer_points()
library(ggvis)
data("iris")
iris %>%
ggvis(x = ~Sepal.Length, y = ~Petal.Length) %>%
layer_smooths() %>%
layer_points() %>%
layer_smooths(span = 0.3, stroke := "red")
library(ggvis)
data("iris")
iris %>%
ggvis(x = ~Sepal.Length, y = ~Petal.Length) %>%
layer_smooths() %>%
layer_points() %>%
layer_smooths(span = 0.3, stroke := "red") %>%
layer_model_predictions(model = "lm", stroke := "green")
library(ggvis)
data("iris")
iris %>%
ggvis(x = ~Sepal.Length, y = ~Petal.Length) %>%
layer_smooths() %>%
layer_points() %>%
layer_smooths(span = 0.3, stroke := "red") %>%
layer_model_predictions(model = "lm", stroke := "green") %>%
layer_model_predictions(model = "lm", stroke := "green", se=T)
